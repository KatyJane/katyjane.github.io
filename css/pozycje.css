.relative{
    position: relative;
}


.orange{
    background-color: orange;
    position: absolute;
    top: 100px;
    left: 60px;
    height: 300px;    
}

.grey{
    background-color: grey;
    height: 300px;
}

/* Prze pozycji absolutnej blok traci swoja blokowosc i rozmiary moga sie zmienic
Pozycjonuje element wzgledem innego elementu rodzica niestatycznego. A jezeli nie ma to wzgledem top/right*/

/* Pozycja relatywna przesuwa sie od pierwotnego miejsca a to miejsce zostaje zarezerwowane */
/*  */

/* Kiedy gorna krawedz przegladarki dojdzie do niego to jest fixed. Przedtem jest relatywny. */

#main-nav{
    position: fixed;
    z-index: 10;
    left: 0;
    top: o;
    width: 100%;
    background-color: #ffffff;
}



/* Cztery kwadraty

container: position relative! wtedy wszystko pasuje w ramke */

.parent{
    font-size: 20px;
}


#em{
    width: 4em;
}

#procent{
    width: 20%;
    height: 100%;
}

#vh{
    width: 20vh;
}

.parent{
    height: 300px;
    background-color: black;
}

.rgb{
    height: 100px;
    background-color: rgb(0, 0, 255);
}

.rgba{
    height: 100px;
    background-color: rgba(0, 0, 255, 0.6);
}

#main-nav ul li{
    display: inline-block;  /* wyswietl menu nawigacyjne obok siebie*/
    background-color: pink;
    width: 30px;;
    height: 30px;
    text-align: center;
}

img{
    float: left;
    padding: 20px;
}

.clear{
    clear: both;
}

.tranzycja{
    width: 300px;
    height: 100px;
    background-color: black;
    transition-property: width background-color;
    transition-duration: 0.4s;
    transition-timing-function: ease-in-out;
    transition-delay: 0.1s;

    /* transition: 0.4s 0.1s; */
}

.tranzycja:hover{
    width: 600px;
    background-color: blue;
}

.background{
    height: 100vh;
    background-image: "../../background.jpg";
}


#rotate {
    background-color: black;
    width: 200px;
    height: 200px;
    transform: rotate(20deg);
    
    /*transform-origin: 0 0; zmiana punktu rotacji */
}


#translate {
    width: 200px;
    height: 200px;
    background-color: red;
    transform: translate(100px, 50px); /* transform: translate(50%, 50%) ustawia element na srodku*/
}

#scale {
    height: 326px;
    width: 768px;
    overflow: hidden;
}

#scale img {
    transition: all 0.4s;
}

#scale img:hover  {
    transform: scale(0.5);
}

/* ANIMACJE */

#scale img {
    animation-name: skaluj;
    animation-duration: 3s;
    animation-iteration-count: infinite;
    animation-timing-function: ease-in-out;
}

@keyframes skaluj {
    0%, 100% {
        transform: scale(1);
    }

    50% {
        transform: scale(2);
    }
}

/* ANIMACJE KONIEC*/

/* FLEX*/

#flex {
    height: 400px;
    background-color: black;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
    align-content: flex-start; /* steruje wszystkimi wierszami*/
}

.flex-inner {
    height: 100px;
    background-color: red;
    border: 1px solid white;
    flex-basis: 25%; /* wysokosc lub szerokosc (row or column)*/
    /*flexy sa elastyczne. zawsze się zmniejszą jezeli się nie zmieszczą.*?
    /*aby flexy spadly uzyj flex-wrap: wrap*/
}

.flex-inner:nth-of-type(5) {
    flex-grow: 1;
}

/* Zeby dzialal flex-shrink, flex-wrap: nie moze byc ustawiony na wrap */